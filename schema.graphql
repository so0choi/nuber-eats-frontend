# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type AllCategoriesOutput {
    categories: [Category!]
    error: String
    ok: Boolean!
}

type Category {
    coverImage: String
    createdAt: DateTime!
    id: Float!
    name: String!
    restaurantCount: Int!
    restaurants: [Restaurant!]!
    slug: String!
    updatedAt: DateTime!
}

type CategoryOutput {
    category: Category
    error: String
    ok: Boolean!
    restaurants: [Restaurant!]
    totalPages: Int
    totalResults: Int
}

type CreateAccountOutput {
    error: String
    ok: Boolean!
}

type CreateDishOutput {
    error: String
    ok: Boolean!
}

type CreateOrderOutput {
    error: String
    ok: Boolean!
}

type CreatePaymentOutput {
    error: String
    ok: Boolean!
}

type CreateRestaurantOutput {
    error: String
    ok: Boolean!
}

type DeleteDishOutput {
    error: String
    ok: Boolean!
}

type DeleteRestaurantOutput {
    error: String
    ok: Boolean!
}

type Dish {
    createdAt: DateTime!
    description: String
    id: Float!
    name: String!
    options: [DishOption!]
    photo: String
    price: Int!
    restaurant: Restaurant!
    updatedAt: DateTime!
}

type DishChoice {
    extra: Float
    name: String!
}

type DishOption {
    choices: [DishChoice!]
    extra: Float
    name: String!
}

type EditDishOutput {
    error: String
    ok: Boolean!
}

type EditOrderOutput {
    error: String
    ok: Boolean!
}

type EditProfileOutput {
    error: String
    ok: Boolean!
}

type EditRestaurantOutput {
    error: String
    ok: Boolean!
}

type GetOrdersOutput {
    error: String
    ok: Boolean!
    orders: [Order!]
}

type GetPaymentsOutput {
    error: String
    ok: Boolean!
    payments: [Payment!]
}

type LoginOutput {
    error: String
    ok: Boolean!
    token: String
}

type Mutation {
    createAccount(input: CreateAccountInput!): CreateAccountOutput!
    createDish(input: CreateDishInput!): CreateDishOutput!
    createOrder(input: CreateOrderInput!): CreateOrderOutput!
    createPayment(input: CreatePaymentInput!): CreatePaymentOutput!
    createRestaurant(input: CreateRestaurantInput!): CreateRestaurantOutput!
    deleteDish(input: DeleteDishInput!): DeleteDishOutput!
    deleteRestaurant(input: DeleteRestaurantInput!): DeleteRestaurantOutput!
    editDish(input: EditDishInput!): EditDishOutput!
    editOrder(input: EditOrderInput!): EditOrderOutput!
    editProfile(input: EditProfileInput!): EditProfileOutput!
    editRestaurant(input: EditRestaurantInput!): EditRestaurantOutput!
    login(input: LoginInput!): LoginOutput!
    takeOrder(input: TakeOrderInput!): TakeOrderOutput!
    verifyEmail(input: VerifyEmailInput!): VerifyEmailOutput!
}

type Order {
    createdAt: DateTime!
    customer: User
    driver: User
    id: Float!
    items: [OrderItem!]!
    restaurant: Restaurant
    status: OrderStatus!
    total: Float
    updatedAt: DateTime!
}

type OrderItem {
    choices: [OrderItemChoice!]
    createdAt: DateTime!
    dish: Dish!
    id: Float!
    updatedAt: DateTime!
}

type OrderItemChoice {
    choice: String
    name: String!
}

type Payment {
    createdAt: DateTime!
    id: Float!
    restaurant: Restaurant!
    restaurantId: Int!
    transactionId: String!
    updatedAt: DateTime!
    user: User!
}

type Query {
    allCategories: AllCategoriesOutput!
    category(input: CategoryInput!): CategoryOutput!
    getOrder(input: GetOrderInput!): GetOrdersOutput!
    getOrders(input: GetOrdersInput!): GetOrdersOutput!
    getPayments: GetPaymentsOutput!
    me: User!
    restaurant(input: RestaurantInput!): RestaurantOutput!
    restaurants(input: RestaurantsInput!): RestaurantsOutput!
    searchRestaurant(input: SearchRestaurantInput!): SearchRestaurantOutput!
    userProfile(userId: Float!): UserProfileOutput!
}

type Restaurant {
    address: String!
    category: Category
    coverImage: String
    createdAt: DateTime!
    id: Float!
    isPromoted: Boolean!
    menu: [Dish!]!
    name: String!
    orders: [Order!]!
    owner: User!
    promotedUntil: DateTime
    updatedAt: DateTime!
}

type RestaurantOutput {
    error: String
    ok: Boolean!
    restaurant: Restaurant
}

type RestaurantsOutput {
    error: String
    ok: Boolean!
    results: [Restaurant!]
    totalPages: Int
    totalResults: Int
}

type SearchRestaurantOutput {
    error: String
    ok: Boolean!
    restaurants: [Restaurant!]
    totalPages: Int
    totalResults: Int
}

type Subscription {
    cookedOrders: Order!
    orderUpdates(input: OrderUpdatesInput!): Order!
    pendingOrders: Order!
}

type TakeOrderOutput {
    error: String
    ok: Boolean!
}

type User {
    createdAt: DateTime!
    email: String!
    id: Float!
    orders: [Order!]!
    password: String
    payments: [Payment!]!
    restaurants: [Restaurant!]!
    rides: [Order!]!
    role: UserRole!
    updatedAt: DateTime!
    verified: Boolean!
}

type UserProfileOutput {
    error: String
    ok: Boolean!
    user: User
}

type VerifyEmailOutput {
    error: String
    ok: Boolean!
}

enum OrderStatus {
    Canceled
    Cooked
    Cooking
    Delivered
    Pending
    PickedUp
}

enum UserRole {
    Client
    Delivery
    Owner
}

"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime

input CategoryInput {
    page: Int = 1
    slug: String!
}

input CreateAccountInput {
    email: String!
    password: String
    role: UserRole!
}

input CreateDishInput {
    description: String
    name: String!
    options: [DishOptionInputType!]
    price: Int!
    restaurantId: Int!
}

input CreateOrderInput {
    items: [CreateOrderItemInput!]!
    restaurantId: Int!
}

input CreateOrderItemInput {
    choices: [OrderItemOptionInputType!]
    dishId: Int!
}

input CreatePaymentInput {
    restaurantId: Int!
    transactionId: String!
}

input CreateRestaurantInput {
    address: String!
    categoryName: String!
    coverImage: String
    name: String!
}

input DeleteDishInput {
    dishId: Int!
}

input DeleteRestaurantInput {
    restaurantId: Float!
}

input DishChoiceInputType {
    extra: Float
    name: String!
}

input DishOptionInputType {
    choices: [DishChoiceInputType!]
    extra: Float
    name: String!
}

input EditDishInput {
    description: String
    dishId: Int!
    name: String
    options: [DishOptionInputType!]
    price: Int
}

input EditOrderInput {
    id: Float!
    status: OrderStatus!
}

input EditProfileInput {
    email: String
    password: String
}

input EditRestaurantInput {
    address: String
    categoryName: String
    coverImage: String
    name: String
    restaurantId: Float!
}

input GetOrderInput {
    id: Float!
}

input GetOrdersInput {
    status: OrderStatus
}

input LoginInput {
    email: String!
    password: String
}

input OrderItemOptionInputType {
    choice: String
    name: String!
}

input OrderUpdatesInput {
    id: Float!
}

input RestaurantInput {
    restaurantId: Int!
}

input RestaurantsInput {
    page: Int = 1
}

input SearchRestaurantInput {
    page: Int = 1
    query: String!
}

input TakeOrderInput {
    id: Float!
}

input VerifyEmailInput {
    code: String!
}
